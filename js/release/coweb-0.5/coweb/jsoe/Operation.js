define(["coweb/jsoe/ContextVector"],function(a){var b=function(a){if(a===undefined)this.type=null;else if(a.state)this.setState(a.state);else{this.siteId=a.siteId,this.contextVector=a.contextVector,this.key=a.key,this.value=a.value,this.position=a.position,this.order=a.order||Infinity;if(a.seqId!==undefined)this.seqId=a.seqId;else if(this.contextVector)this.seqId=this.contextVector.getSeqForSite(this.siteId)+1;else throw new Error("missing sequence id for new operation");this.immutable=!1}};b.prototype.getState=function(){var a=[this.type,this.key,this.value,this.position,this.contextVector.sites,this.seqId,this.siteId,this.order];return a},b.prototype.setState=function(b){this.key=b[1],this.value=b[2],this.position=b[3],this.contextVector=new a({state:b[4]}),this.seqId=b[5],this.siteId=b[6],this.order=b[7]},b.prototype.copy=function(){if(!this.immutable)return this;var a={siteId:this.siteId,seqId:this.seqId,contextVector:this.contextVector.copy(),key:this.key,value:this.value,position:this.position,order:this.order},b=new this.constructor(a);return b},b.prototype.compareByContext=function(a){var b=this.contextVector.compare(a.contextVector);if(b===0)return this.siteId<a.siteId?-1:this.siteId>a.siteId?1:0;return b},b.prototype.compareByOrder=function(a){if(this.order===a.order)return this.seqId<a.seqId?-1:1;if(this.order<a.order)return-1;if(this.order>a.order)return 1},b.prototype.copyContextVector=function(){return this.contextVector.copy()},b.prototype.transformMethod=function(){throw new Error("transformMethod not implemented")},b.prototype.transformWithUpdate=function(a){throw new Error("transformWithUpdate not implemented")},b.prototype.transformWithInsert=function(a){throw new Error("transformWithInsert not implemented")},b.prototype.transformWithDelete=function(a){throw new Error("transformWithDelete not implemented")};return b})