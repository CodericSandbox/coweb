#!/usr/bin/env python
'''
Copyright (c) IBM Corporation 2008, 2011. All Rights Reserved.
'''
import sys
import os.path
import optparse
import stat
import coweb
import uuid
import string

def init(options):
    '''Creates an coweb app container script.'''
    outPath = os.path.abspath(options.output)
    if os.path.isfile(outPath) and not options.force:
        print outPath, 'exists, use --force to replace'
        sys.exit(1)
    modulePath = os.path.abspath(os.path.dirname(coweb.__file__))
    if options.verbose:
        tmplPath = os.path.join(modulePath, 'scripts', 'verbose.tmpl')        
    else:
        tmplPath = os.path.join(modulePath, 'scripts', 'simple.tmpl')
    with file(tmplPath) as f:
        text = f.read()
    # generate a secret key for signing cookies
    tmpl = string.Template(text)
    text = tmpl.substitute({'webSecretKey' : uuid.uuid4().hex})
    with file(outPath, 'w') as f:
        f.write(text)
        os.fchmod(f.fileno(), stat.S_IRWXU|stat.S_IRGRP|stat.S_IXGRP)
    print 'Created coweb script at: %s' % outPath

def run():
    parser = optparse.OptionParser('usage: %prog init [options]')
    parser.add_option('-o', dest='output', metavar='FILE', default='coweb_app.py',
                  help='name and path of the server file to initialize (default: ./coweb_server.py)')
    parser.add_option('-v', dest='verbose', action='store_true', default=False,
                  help='init a verbose coweb container script with comments (default: False)')
    parser.add_option('-f', '--force', dest='force', action='store_true', default=False,
                  help='overwrite an existing file (default: False)')
    (options, args) = parser.parse_args()

    try:
        func = globals()[args[0]]
    except (KeyError, IndexError):
        parser.print_usage()
        sys.exit(255)
    func(options)

if __name__ == '__main__':
    run()
